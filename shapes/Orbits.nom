
###  Orbits.nom
#    Testfile for coordinated time-varying scenes, depicting a planetary system

# CHS 2020/12/3
##############################################################

#  NOME3_file.nom   ## ... in the future this may be required

##############  BEGIN_STUFF.nom  #############################

surface M  color  (0.9 0   1  ) endsurface   # Magenta
surface Z  color  (1   0   0.6) endsurface   # Zinnober
surface R  color  (1   0.1 0  ) endsurface   # Red
surface O  color  (1   0.6 0  ) endsurface   # Orange
surface Y  color  (1   1   0  ) endsurface   # Yellow
surface L  color  (0.5 1   0  ) endsurface   # Lime
surface G  color  (0   0.9 0  ) endsurface   # Green
surface A  color  (0   0.9 0.7) endsurface   # Aqua
surface C  color  (0   1   1  ) endsurface   # Cyan
surface U  color  (0   0.6 1  ) endsurface   # Uniform
surface B  color  (0   0.3 1  ) endsurface   # Blue
surface V  color  (0.3 0   1  ) endsurface   # Violet
surface P  color  (0.6 0   1  ) endsurface   # Purple

surface W  color  (1   1   1  ) endsurface   # White
surface S  color  (0.7 0.7 0.7) endsurface   # Snow
surface D  color  (0.4 0.4 0.4) endsurface   # Dark
surface K  color  (0   0   0  ) endsurface   # blacK

################  Coordinate axes  ###################

point ooo  ( 0 0 0 ) endpoint 
point xoo  ( 1 0 0 ) endpoint
point oyo  ( 0 1 0 ) endpoint
point ooz  ( 0 0 1 ) endpoint

polyline xaxis (ooo xoo) endpolyline
polyline yaxis (ooo oyo) endpolyline
polyline zaxis (ooo ooz) endpolyline

group coord_axes
  instance ix xaxis surface R endinstance
  instance iy yaxis surface U endinstance
  instance iz zaxis surface G endinstance
endgroup

instance axes coord_axes  endinstance  #  if desired in display.

##  A small pyramid shape:
mesh pyr
  face fo (xoo oyo ooz)  endface
  face fc (ooo oyo xoo)  endface
  face fb (ooo xoo ooz)  endface
  face fa (ooo ooz oyo)  endface
endmesh

########################  parameters  ###################################################################

bank par
    set     speed     0.003    0.001   0.05     0.001  ## ... in fraction of radians per subsequent frame  >>> Make sure it can handle "0.001"  !!
    set     frame     0        0      10000     1      ## manual control, stepping thru consecutive frames
endbank

# In an automatic, time-varying setting, all occurrences of "$par.frame" will be replaced by $frame


#######################  the heavenly bodies  ###########################################################################

##  This may have to be adjusted to the newer version of the sphere generator.  I used:
##  sphere id (num_sides radius num_rotation max_theta min_phi max_phi) endsphere

sphere sun   ( 8  0.1   12  360  0  180 ) endsphere
sphere venus ( 6  0.02  8   360  0  180 ) endsphere
sphere earth ( 6  0.03  8   360  0  180 ) endsphere
sphere moon  ( 5  0.01  6   360  0  180 ) endsphere

##  I woud prefer the following spehere definition:
##  sphere id ( radius  num_long{around equator}  num_latt{from S-pole to N-pole}  max_long{<=360 around z-axix} min_latt{-90} max_latt{90} )
# sphere sun   ( 0.1   8 12   360  -90  90 ) endsphere
# sphere venus ( 0.02  6  8   360  -90  90 ) endsphere
# sphere earth ( 0.03  6  8   360  -90  90 ) endsphere
# sphere moon  ( 0.01  5  6   360  -90  90 ) endsphere


group assembly
    instance isun   sun    surface Y  endinstance
    instance iearth venus  surface S  translate({expr 0.5*cos(2*$par.speed*$par.frame)} {expr 0.5*sin(2*$par.speed*$par.frame)} 0)  endinstance
    instance iearth earth  surface C  translate({expr cos($par.speed*$par.frame)} {expr sin($par.speed*$par.frame)} 0)  endinstance
    instance imoon  moon   surface O  
      translate({expr cos($par.speed*$par.frame)+0.2*cos(12*$par.speed*$par.frame)} {expr sin($par.speed*$par.frame)+0.2*sin(12*$par.speed*$par.frame)} 0)
    endinstance
    instance lunar_lander   pyr  scale(0.001 0.001 0.001)  surface M  translate({expr cos($par.speed*$par.frame)+0.2*cos(12*$par.speed*$par.frame)
       +0.04*cos(60*$par.speed*$par.frame)} {expr sin($par.speed*$par.frame)+0.2*sin(12*$par.speed*$par.frame)+0.04*sin(60*$par.speed*$par.frame)} 0)
    endinstance
endgroup

instance system  assembly  surface D   endinstance

################  END  #########################################################




